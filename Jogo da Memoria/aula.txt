Aula de Programa√ß√£o: Construindo o Jogo da Mem√≥ria
Bem-vindo √† nossa terceira aula de programa√ß√£o! Hoje, vamos nos aventurar na cria√ß√£o de um Jogo da Mem√≥ria usando HTML, CSS e JavaScript. Este projeto √© um pouco mais complexo que os anteriores, mas com explica√ß√µes detalhadas e exemplos l√∫dicos, voc√™ conseguir√° domin√°-lo!

Objetivos da Aula
Entender a estrutura avan√ßada de HTML para criar elementos din√¢micos.
Estilizar elementos com CSS para tornar o jogo visualmente atraente.
Implementar l√≥gica de jogo em JavaScript, incluindo manipula√ß√£o de arrays, eventos e temporizadores.
Manipular o DOM (Document Object Model) para criar e interagir com elementos dinamicamente.
Desenvolver habilidades de resolu√ß√£o de problemas atrav√©s da cria√ß√£o de um jogo interativo.
Estrutura do Projeto
Vamos construir um jogo onde o usu√°rio deve encontrar pares de cartas iguais. O jogo ser√° composto por um tabuleiro com cartas viradas para baixo. Ao clicar em uma carta, ela vira para revelar seu s√≠mbolo. Se duas cartas reveladas forem iguais, elas permanecem viradas. Caso contr√°rio, elas voltam a esconder. O objetivo √© encontrar todos os pares com o menor n√∫mero de tentativas poss√≠vel.

1. Estrutura HTML
Come√ßamos criando a estrutura b√°sica da nossa p√°gina web.

html
Copiar c√≥digo
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jogo da Mem√≥ria</title>
    <style>
        /* Nosso CSS vir√° aqui */
    </style>
</head>
<body>
    <h1>Jogo da Mem√≥ria</h1>
    <div class="tabuleiro"></div>

    <script>
        // Nosso c√≥digo JavaScript vir√° aqui
    </script>
</body>
</html>
Explicando o HTML:
<!DOCTYPE html>: Declara que este documento √© um documento HTML5.
<html lang="pt-BR">: Define o idioma da p√°gina como portugu√™s do Brasil.
<head>: Cont√©m metadados sobre o documento.
<meta charset="UTF-8">: Define a codifica√ß√£o de caracteres como UTF-8.
<meta name="viewport" content="width=device-width, initial-scale=1.0">: Garante que a p√°gina seja responsiva em dispositivos m√≥veis.
<title>Jogo da Mem√≥ria</title>: Define o t√≠tulo da p√°gina que aparece na aba do navegador.
<style>: Espa√ßo para adicionar estilos CSS que melhorar√£o a apar√™ncia do jogo.
<body>: Cont√©m o conte√∫do vis√≠vel da p√°gina.
<h1>Jogo da Mem√≥ria</h1>: T√≠tulo principal do jogo.
<div class="tabuleiro"></div>: Div que representar√° o tabuleiro do jogo onde as cartas ser√£o exibidas.
<script>: Espa√ßo para o c√≥digo JavaScript que adicionar√° interatividade ao jogo.
2. Estilizando com CSS
Vamos adicionar estilos para tornar o jogo visualmente agrad√°vel e organizado.

css
Copiar c√≥digo
<style>
    body {
        font-family: Arial, sans-serif;
        text-align: center;
        margin: 20px;
        background-color: #f0f8ff;
    }
    h1 {
        color: #333;
    }
    .tabuleiro {
        display: grid;
        grid-template-columns: repeat(4, 100px);
        gap: 10px;
        margin: 50px auto;
        width: 440px;
    }
    .carta {
        width: 100px;
        height: 100px;
        background-color: #333;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        color: white;
        border-radius: 8px;
        transition: background-color 0.3s, transform 0.3s;
    }
    .carta.virada {
        background-color: #f39c12;
        transform: rotateY(180deg);
    }
    .carta.desativada {
        background-color: #2ecc71;
        cursor: default;
    }
</style>
Explicando o CSS:
body:

font-family: Arial, sans-serif;: Define a fonte da p√°gina.
text-align: center;: Centraliza o texto na p√°gina.
margin: 20px;: Adiciona uma margem ao redor da p√°gina.
background-color: #f0f8ff;: Define uma cor de fundo suave para a p√°gina.
h1:

color: #333;: Define a cor do t√≠tulo.
.tabuleiro:

display: grid;: Usa o layout de grid para organizar as cartas.
grid-template-columns: repeat(4, 100px);: Define 4 colunas de 100px cada.
gap: 10px;: Define o espa√ßo entre as cartas.
margin: 50px auto;: Centraliza o tabuleiro horizontalmente e adiciona uma margem superior e inferior.
width: 440px;: Define a largura total do tabuleiro.
.carta:

width: 100px;: Define a largura da carta.
height: 100px;: Define a altura da carta.
background-color: #333;: Define a cor de fundo da carta (preto escuro).
cursor: pointer;: Muda o cursor para uma m√£ozinha ao passar sobre a carta, indicando que √© clic√°vel.
display: flex;: Usa flexbox para centralizar o conte√∫do dentro da carta.
align-items: center; justify-content: center;: Centraliza o conte√∫do vertical e horizontalmente.
font-size: 24px;: Define o tamanho da fonte dentro da carta.
color: white;: Define a cor do texto dentro da carta.
border-radius: 8px;: Adiciona cantos arredondados √†s cartas.
transition: background-color 0.3s, transform 0.3s;: Adiciona transi√ß√µes suaves para mudan√ßas de cor e rota√ß√£o.
.carta.virada:

background-color: #f39c12;: Muda a cor de fundo quando a carta √© virada.
transform: rotateY(180deg);: Adiciona uma rota√ß√£o para dar a apar√™ncia de uma carta virada.
.carta.desativada:

background-color: #2ecc71;: Muda a cor de fundo para verde quando a carta √© desativada (pares encontrados).
cursor: default;: Remove o cursor de ponteiro, indicando que a carta n√£o √© mais clic√°vel.
3. Adicionando Interatividade com JavaScript
Agora, vamos adicionar a l√≥gica que far√° o jogo funcionar. O JavaScript ser√° respons√°vel por criar as cartas, embaralh√°-las, gerenciar o estado do jogo e verificar se h√° pares correspondentes.

javascript
Copiar c√≥digo
<script>
    // Seleciona o tabuleiro onde as cartas ser√£o adicionadas
    const tabuleiro = document.querySelector(".tabuleiro");

    // Define as cartas (simbolos ou letras) que ser√£o usadas no jogo
    const cartas = ["üçé", "üçå", "üçá", "üçâ", "üçì", "üçí", "üçë", "üçç"];

    // Duplica as cartas para criar pares
    let cartasDuplicadas = [...cartas, ...cartas];

    // Vari√°veis para controlar o estado das cartas viradas
    let cartaVirada = false;
    let primeiraCarta, segundaCarta;

    // Vari√°vel para bloquear o tabuleiro temporariamente
    let bloqueio = false;

    // Fun√ß√£o para embaralhar as cartas
    function embaralharCartas() {
        cartasDuplicadas.sort(() => 0.5 - Math.random());
    }

    // Fun√ß√£o para criar as cartas no tabuleiro
    function criarCartas() {
        cartasDuplicadas.forEach((letra) => {
            const carta = document.createElement("div");
            carta.classList.add("carta");
            carta.dataset.letra = letra; // Armazena o s√≠mbolo na carta
            carta.addEventListener("click", virarCarta);
            tabuleiro.appendChild(carta);
        });
    }

    // Chama as fun√ß√µes de embaralhar e criar as cartas ao carregar a p√°gina
    embaralharCartas();
    criarCartas();

    // Fun√ß√£o que ser√° chamada ao clicar em uma carta
    function virarCarta() {
        if (bloqueio) return; // Se o tabuleiro estiver bloqueado, n√£o faz nada
        if (this === primeiraCarta) return; // Evita clicar na mesma carta duas vezes

        this.classList.add("virada"); // Adiciona a classe 'virada' para estilizar a carta
        this.textContent = this.dataset.letra; // Mostra o s√≠mbolo na carta

        if (!cartaVirada) {
            // Primeira carta virada
            cartaVirada = true;
            primeiraCarta = this;
            return;
        }

        // Segunda carta virada
        segundaCarta = this;
        verificarPar();
    }

    // Fun√ß√£o para verificar se as duas cartas viradas formam um par
    function verificarPar() {
        const igual = primeiraCarta.dataset.letra === segundaCarta.dataset.letra;

        if (igual) {
            // Se for igual, desabilita as cartas
            desabilitarCartas();
        } else {
            // Se n√£o for igual, vira as cartas de volta ap√≥s um tempo
            desvirarCartas();
        }
    }

    // Fun√ß√£o para desabilitar as cartas que formaram um par
    function desabilitarCartas() {
        primeiraCarta.removeEventListener("click", virarCarta);
        segundaCarta.removeEventListener("click", virarCarta);
        primeiraCarta.classList.add("desativada");
        segundaCarta.classList.add("desativada");
        resetarTabuleiro();
    }

    // Fun√ß√£o para virar as cartas de volta se n√£o formarem um par
    function desvirarCartas() {
        bloqueio = true; // Bloqueia o tabuleiro enquanto as cartas est√£o virando de volta
        setTimeout(() => {
            primeiraCarta.classList.remove("virada");
            segundaCarta.classList.remove("virada");
            primeiraCarta.textContent = "";
            segundaCarta.textContent = "";
            resetarTabuleiro();
        }, 1000); // Tempo de espera antes de virar as cartas de volta
    }

    // Fun√ß√£o para resetar o estado das cartas viradas
    function resetarTabuleiro() {
        [cartaVirada, bloqueio] = [false, false];
        [primeiraCarta, segundaCarta] = [null, null];
    }
</script>
Explicando o JavaScript Passo a Passo:
Vamos entender cada parte do c√≥digo de forma l√∫dica!

1. Selecionando o Tabuleiro
javascript
Copiar c√≥digo
const tabuleiro = document.querySelector(".tabuleiro");
O que √©?: Seleciona o elemento <div class="tabuleiro"> onde as cartas ser√£o adicionadas.
Analogia: Imagine o tabuleiro como a mesa onde vamos espalhar as cartas para jogar.
2. Definindo as Cartas
javascript
Copiar c√≥digo
const cartas = ["üçé", "üçå", "üçá", "üçâ", "üçì", "üçí", "üçë", "üçç"];
O que √©?: Define um array com s√≠mbolos de frutas que ser√£o usados nas cartas.
Analogia: Cada s√≠mbolo representa uma carta que voc√™ deve encontrar o par.
3. Duplicando as Cartas para Criar Pares
javascript
Copiar c√≥digo
let cartasDuplicadas = [...cartas, ...cartas];
O que √©?: Duplica o array cartas para criar pares, resultando em 16 cartas (8 pares).
Analogia: Se temos uma carta üçé, precisamos de outra üçé para formar um par.
4. Vari√°veis para Controlar o Estado das Cartas Viradas
javascript
Copiar c√≥digo
let cartaVirada = false;
let primeiraCarta, segundaCarta;
let bloqueio = false;
O que √©?:
cartaVirada: Indica se uma carta j√° foi virada.
primeiraCarta e segundaCarta: Armazenam as duas cartas que o usu√°rio clica.
bloqueio: Bloqueia o tabuleiro temporariamente para evitar cliques adicionais enquanto as cartas est√£o virando de volta.
Analogia: cartaVirada √© como dizer "uma carta j√° foi virada, agora precisamos virar outra". bloqueio √© como segurar a mesa para que ningu√©m mais possa virar cartas enquanto estamos verificando.
5. Embaralhando as Cartas
javascript
Copiar c√≥digo
function embaralharCartas() {
    cartasDuplicadas.sort(() => 0.5 - Math.random());
}
O que √©?: Embaralha as cartas de forma aleat√≥ria usando o m√©todo sort() com uma fun√ß√£o de compara√ß√£o que retorna valores aleat√≥rios.
Como Funciona?:
Math.random(): Gera um n√∫mero decimal aleat√≥rio entre 0 e 1.
0.5 - Math.random(): Retorna um valor positivo ou negativo aleatoriamente, embaralhando o array.
Analogia: √â como misturar as cartas antes de coloc√°-las na mesa para jogar.
6. Criando as Cartas no Tabuleiro
javascript
Copiar c√≥digo
function criarCartas() {
    cartasDuplicadas.forEach((letra) => {
        const carta = document.createElement("div");
        carta.classList.add("carta");
        carta.dataset.letra = letra; // Armazena o s√≠mbolo na carta
        carta.addEventListener("click", virarCarta);
        tabuleiro.appendChild(carta);
    });
}
O que √©?: Cria elementos <div> para cada carta, adiciona classes e atributos, e os adiciona ao tabuleiro.
Passo a Passo:
cartasDuplicadas.forEach((letra) => { ... }): Itera sobre cada s√≠mbolo de carta.
document.createElement("div"): Cria um novo elemento <div>.
carta.classList.add("carta"): Adiciona a classe carta para aplicar estilos CSS.
carta.dataset.letra = letra: Armazena o s√≠mbolo na propriedade data-letra da carta.
carta.addEventListener("click", virarCarta): Adiciona um listener de clique que chama a fun√ß√£o virarCarta.
tabuleiro.appendChild(carta): Adiciona a carta ao tabuleiro.
Analogia: √â como construir cada carta, pintando-a com seu s√≠mbolo e colocando-a na mesa para jogar.
7. Chamando as Fun√ß√µes de Embaralhar e Criar as Cartas
javascript
Copiar c√≥digo
embaralharCartas();
criarCartas();
O que √©?: Executa as fun√ß√µes para embaralhar e criar as cartas assim que a p√°gina carrega.
Analogia: Mistura as cartas e as espalha na mesa para o jogo come√ßar.
8. Fun√ß√£o para Virar uma Carta
javascript
Copiar c√≥digo
function virarCarta() {
    if (bloqueio) return; // Se o tabuleiro estiver bloqueado, n√£o faz nada
    if (this === primeiraCarta) return; // Evita clicar na mesma carta duas vezes

    this.classList.add("virada"); // Adiciona a classe 'virada' para estilizar a carta
    this.textContent = this.dataset.letra; // Mostra o s√≠mbolo na carta

    if (!cartaVirada) {
        // Primeira carta virada
        cartaVirada = true;
        primeiraCarta = this;
        return;
    }

    // Segunda carta virada
    segundaCarta = this;
    verificarPar();
}
O que √©?: Esta fun√ß√£o √© chamada quando o usu√°rio clica em uma carta. Ela vira a carta e verifica se h√° um par.
Passo a Passo:
if (bloqueio) return;: Se o tabuleiro estiver bloqueado (por exemplo, enquanto espera para virar cartas de volta), a fun√ß√£o n√£o faz nada.
if (this === primeiraCarta) return;: Evita que o usu√°rio clique na mesma carta duas vezes.
this.classList.add("virada");: Adiciona a classe virada para alterar o estilo da carta e mostrar o s√≠mbolo.
this.textContent = this.dataset.letra;: Exibe o s√≠mbolo armazenado na carta.
if (!cartaVirada) { ... }: Verifica se √© a primeira ou segunda carta virada.
Primeira Carta:
cartaVirada = true;: Indica que uma carta j√° foi virada.
primeiraCarta = this;: Armazena a primeira carta virada.
return;: Sai da fun√ß√£o para aguardar o pr√≥ximo clique.
Segunda Carta:
segundaCarta = this;: Armazena a segunda carta virada.
verificarPar();: Chama a fun√ß√£o para verificar se as duas cartas formam um par.
Analogia: √â como pegar uma carta da mesa e vir√°-la para ver qual s√≠mbolo est√° nela. Se √© a primeira carta que voc√™ virou, espera pela pr√≥xima. Se √© a segunda, verifica se as duas formam um par.
9. Fun√ß√£o para Verificar se H√° um Par
javascript
Copiar c√≥digo
function verificarPar() {
    const igual = primeiraCarta.dataset.letra === segundaCarta.dataset.letra;

    if (igual) {
        // Se for igual, desabilita as cartas
        desabilitarCartas();
    } else {
        // Se n√£o for igual, vira as cartas de volta ap√≥s um tempo
        desvirarCartas();
    }
}
O que √©?: Verifica se as duas cartas viradas possuem o mesmo s√≠mbolo.
Passo a Passo:
const igual = primeiraCarta.dataset.letra === segundaCarta.dataset.letra;: Compara os s√≠mbolos das duas cartas.
if (igual) { ... } else { ... }: Se forem iguais, desabilita as cartas; caso contr√°rio, vira-as de volta.
Analogia: √â como conferir se as duas cartas que voc√™ virou mostram a mesma fruta. Se sim, voc√™ as remove da mesa; se n√£o, voc√™ as vira novamente.
10. Fun√ß√£o para Desabilitar as Cartas que Formaram um Par
javascript
Copiar c√≥digo
function desabilitarCartas() {
    primeiraCarta.removeEventListener("click", virarCarta);
    segundaCarta.removeEventListener("click", virarCarta);
    primeiraCarta.classList.add("desativada");
    segundaCarta.classList.add("desativada");
    resetarTabuleiro();
}
O que √©?: Remove os listeners de clique das cartas que formaram um par e adiciona a classe desativada para alterar seu estilo.
Passo a Passo:
removeEventListener("click", virarCarta);: Remove o evento de clique das cartas, impedindo que sejam viradas novamente.
classList.add("desativada");: Adiciona uma classe que muda a cor das cartas para indicar que est√£o desativadas.
resetarTabuleiro();: Reseta o estado das vari√°veis que controlam o jogo.
Analogia: √â como encontrar duas cartas iguais e ent√£o remov√™-las da mesa para que voc√™ n√£o precise mais se preocupar com elas.
11. Fun√ß√£o para Virar as Cartas de Volta se N√£o Formarem um Par
javascript
Copiar c√≥digo
function desvirarCartas() {
    bloqueio = true; // Bloqueia o tabuleiro enquanto as cartas est√£o virando de volta
    setTimeout(() => {
        primeiraCarta.classList.remove("virada");
        segundaCarta.classList.remove("virada");
        primeiraCarta.textContent = "";
        segundaCarta.textContent = "";
        resetarTabuleiro();
    }, 1000); // Tempo de espera antes de virar as cartas de volta
}
O que √©?: Vira as duas cartas de volta para o estado inicial se elas n√£o formarem um par.
Passo a Passo:
bloqueio = true;: Impede que o usu√°rio possa clicar em outras cartas enquanto as atuais est√£o virando de volta.
setTimeout(() => { ... }, 1000);: Executa a fun√ß√£o de virar as cartas de volta ap√≥s 1 segundo (1000 milissegundos).
classList.remove("virada");: Remove a classe virada, revertendo o estilo da carta.
textContent = "";: Remove o s√≠mbolo da carta.
resetarTabuleiro();: Reseta o estado das vari√°veis que controlam o jogo.
Analogia: √â como se voc√™ tivesse virado duas cartas e percebido que elas n√£o combinam. Ent√£o, voc√™ espera um pouco antes de virar as cartas de volta para que o jogo continue.
12. Fun√ß√£o para Resetar o Estado das Cartas Viradas
javascript
Copiar c√≥digo
function resetarTabuleiro() {
    [cartaVirada, bloqueio] = [false, false];
    [primeiraCarta, segundaCarta] = [null, null];
}
O que √©?: Reseta as vari√°veis que controlam o estado das cartas viradas e o bloqueio do tabuleiro.
Passo a Passo:
[cartaVirada, bloqueio] = [false, false];: Define cartaVirada e bloqueio como false, permitindo novas intera√ß√µes.
[primeiraCarta, segundaCarta] = [null, null];: Limpa as refer√™ncias para as cartas viradas.
Analogia: √â como limpar a mesa e prepar√°-la para a pr√≥xima jogada, permitindo que novas cartas sejam viradas.
Resumo Completo do C√≥digo
Vamos ver o c√≥digo completo novamente com todos os componentes integrados.

html
Copiar c√≥digo
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jogo da Mem√≥ria</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
            background-color: #f0f8ff;
        }
        h1 {
            color: #333;
        }
        .tabuleiro {
            display: grid;
            grid-template-columns: repeat(4, 100px);
            gap: 10px;
            margin: 50px auto;
            width: 440px;
        }
        .carta {
            width: 100px;
            height: 100px;
            background-color: #333;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
            border-radius: 8px;
            transition: background-color 0.3s, transform 0.3s;
        }
        .carta.virada {
            background-color: #f39c12;
            transform: rotateY(180deg);
        }
        .carta.desativada {
            background-color: #2ecc71;
            cursor: default;
        }
    </style>
</head>
<body>
    <h1>Jogo da Mem√≥ria</h1>
    <div class="tabuleiro"></div>

    <script>
        // Seleciona o tabuleiro onde as cartas ser√£o adicionadas
        const tabuleiro = document.querySelector(".tabuleiro");

        // Define as cartas (simbolos ou letras) que ser√£o usadas no jogo
        const cartas = ["üçé", "üçå", "üçá", "üçâ", "üçì", "üçí", "üçë", "üçç"];

        // Duplica as cartas para criar pares
        let cartasDuplicadas = [...cartas, ...cartas];

        // Vari√°veis para controlar o estado das cartas viradas
        let cartaVirada = false;
        let primeiraCarta, segundaCarta;

        // Vari√°vel para bloquear o tabuleiro temporariamente
        let bloqueio = false;

        // Fun√ß√£o para embaralhar as cartas
        function embaralharCartas() {
            cartasDuplicadas.sort(() => 0.5 - Math.random());
        }

        // Fun√ß√£o para criar as cartas no tabuleiro
        function criarCartas() {
            cartasDuplicadas.forEach((letra) => {
                const carta = document.createElement("div");
                carta.classList.add("carta");
                carta.dataset.letra = letra; // Armazena o s√≠mbolo na carta
                carta.addEventListener("click", virarCarta);
                tabuleiro.appendChild(carta);
            });
        }

        // Chama as fun√ß√µes de embaralhar e criar as cartas ao carregar a p√°gina
        embaralharCartas();
        criarCartas();

        // Fun√ß√£o que ser√° chamada ao clicar em uma carta
        function virarCarta() {
            if (bloqueio) return; // Se o tabuleiro estiver bloqueado, n√£o faz nada
            if (this === primeiraCarta) return; // Evita clicar na mesma carta duas vezes

            this.classList.add("virada"); // Adiciona a classe 'virada' para estilizar a carta
            this.textContent = this.dataset.letra; // Mostra o s√≠mbolo na carta

            if (!cartaVirada) {
                // Primeira carta virada
                cartaVirada = true;
                primeiraCarta = this;
                return;
            }

            // Segunda carta virada
            segundaCarta = this;
            verificarPar();
        }

        // Fun√ß√£o para verificar se as duas cartas viradas formam um par
        function verificarPar() {
            const igual = primeiraCarta.dataset.letra === segundaCarta.dataset.letra;

            if (igual) {
                // Se for igual, desabilita as cartas
                desabilitarCartas();
            } else {
                // Se n√£o for igual, vira as cartas de volta ap√≥s um tempo
                desvirarCartas();
            }
        }

        // Fun√ß√£o para desabilitar as cartas que formaram um par
        function desabilitarCartas() {
            primeiraCarta.removeEventListener("click", virarCarta);
            segundaCarta.removeEventListener("click", virarCarta);
            primeiraCarta.classList.add("desativada");
            segundaCarta.classList.add("desativada");
            resetarTabuleiro();
        }

        // Fun√ß√£o para virar as cartas de volta se n√£o formarem um par
        function desvirarCartas() {
            bloqueio = true; // Bloqueia o tabuleiro enquanto as cartas est√£o virando de volta
            setTimeout(() => {
                primeiraCarta.classList.remove("virada");
                segundaCarta.classList.remove("virada");
                primeiraCarta.textContent = "";
                segundaCarta.textContent = "";
                resetarTabuleiro();
            }, 1000); // Tempo de espera antes de virar as cartas de volta
        }

        // Fun√ß√£o para resetar o estado das cartas viradas
        function resetarTabuleiro() {
            [cartaVirada, bloqueio] = [false, false];
            [primeiraCarta, segundaCarta] = [null, null];
        }
    </script>
</body>
</html>
Como Funciona na Pr√°tica?
P√°gina Carregada:

A p√°gina exibe o t√≠tulo "Jogo da Mem√≥ria" e um tabuleiro com 16 cartas viradas para baixo.
Embaralhamento e Cria√ß√£o das Cartas:

As cartas s√£o embaralhadas para garantir uma ordem aleat√≥ria.
Cada carta √© criada como um elemento <div>, estilizada e adicionada ao tabuleiro.
Intera√ß√£o do Usu√°rio:

Virar uma Carta:
Quando o usu√°rio clica em uma carta, a fun√ß√£o virarCarta √© chamada.
A carta vira, exibindo seu s√≠mbolo.
Verificar Par:
Se for a primeira carta virada, espera pela pr√≥xima intera√ß√£o.
Se for a segunda carta virada, verifica se os s√≠mbolos das duas cartas s√£o iguais.
Se Formarem um Par:
As cartas permanecem viradas e s√£o desabilitadas para evitar cliques futuros.
Se N√£o Formarem um Par:
As cartas viram de volta ap√≥s 1 segundo, escondendo os s√≠mbolos novamente.
Finalizando o Jogo:

O jogo continua at√© que todos os pares sejam encontrados.
Para aprimorar o jogo, voc√™ pode adicionar um contador de tentativas ou um cron√¥metro para medir o desempenho do jogador.
Atividades Pr√°ticas
Para refor√ßar o aprendizado, tente realizar algumas das atividades abaixo! Essas atividades ajudar√£o voc√™ a personalizar e melhorar seu Jogo da Mem√≥ria.

1. Adicionar um Contador de Pares Encontrados
Vamos adicionar um contador que mostra quantos pares o jogador j√° encontrou.

HTML:

html
Copiar c√≥digo
<h2>Pares Encontrados: <span id="pares">0</span>/8</h2>
CSS (Opcional):

css
Copiar c√≥digo
#pares {
    color: #2ecc71;
}
JavaScript:

javascript
Copiar c√≥digo
const paresDisplay = document.getElementById("pares");
let paresEncontrados = 0;

function desabilitarCartas() {
    primeiraCarta.removeEventListener("click", virarCarta);
    segundaCarta.removeEventListener("click", virarCarta);
    primeiraCarta.classList.add("desativada");
    segundaCarta.classList.add("desativada");
    paresEncontrados++;
    paresDisplay.textContent = paresEncontrados;
    resetarTabuleiro();

    if (paresEncontrados === cartas.length) {
        setTimeout(() => {
            alert("Parab√©ns! Voc√™ encontrou todos os pares!");
            reiniciarJogo();
        }, 500);
    }
}

function reiniciarJogo() {
    cartasDuplicadas = [...cartas, ...cartas];
    paresEncontrados = 0;
    paresDisplay.textContent = paresEncontrados;
    tabuleiro.innerHTML = "";
    embaralharCartas();
    criarCartas();
}
Explica√ß√£o:

paresDisplay: Seleciona o elemento que exibir√° o n√∫mero de pares encontrados.
paresEncontrados: Armazena a contagem de pares encontrados.
desabilitarCartas: Incrementa paresEncontrados cada vez que um par √© encontrado e atualiza a exibi√ß√£o.
if (paresEncontrados === cartas.length): Verifica se todos os pares foram encontrados e exibe uma mensagem de parab√©ns.
reiniciarJogo: Reinicia o jogo ao encontrar todos os pares.
2. Adicionar um Cron√¥metro
Vamos adicionar um cron√¥metro que conta o tempo desde o in√≠cio do jogo.

HTML:

html
Copiar c√≥digo
<h2>Tempo: <span id="tempo">0</span> segundos</h2>
CSS (Opcional):

css
Copiar c√≥digo
#tempo {
    color: #3498db;
}
JavaScript:

javascript
Copiar c√≥digo
const tempoDisplay = document.getElementById("tempo");
let tempo = 0;
let cronometro;

function iniciarCronometro() {
    cronometro = setInterval(() => {
        tempo++;
        tempoDisplay.textContent = tempo;
    }, 1000);
}

function pararCronometro() {
    clearInterval(cronometro);
}

function reiniciarJogo() {
    // Reinicia o cron√¥metro
    tempo = 0;
    tempoDisplay.textContent = tempo;
    pararCronometro();
    iniciarCronometro();

    // Reinicia os pares encontrados
    cartasDuplicadas = [...cartas, ...cartas];
    paresEncontrados = 0;
    paresDisplay.textContent = paresEncontrados;
    tabuleiro.innerHTML = "";
    embaralharCartas();
    criarCartas();
}

// Inicia o cron√¥metro ao carregar a p√°gina
iniciarCronometro();
Explica√ß√£o:

tempoDisplay: Seleciona o elemento que exibir√° o tempo.
tempo: Armazena o tempo em segundos.
cronometro: Armazena a refer√™ncia do setInterval.
iniciarCronometro: Inicia o cron√¥metro, incrementando tempo a cada segundo.
pararCronometro: Para o cron√¥metro.
reiniciarJogo: Reinicia o cron√¥metro e o jogo ao encontrar todos os pares.
3. Melhorar a Interface com Anima√ß√µes
Vamos adicionar anima√ß√µes para tornar o jogo mais din√¢mico e interessante.

CSS:

css
Copiar c√≥digo
.carta {
    width: 100px;
    height: 100px;
    background-color: #333;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    color: white;
    border-radius: 8px;
    transition: background-color 0.3s, transform 0.3s;
    perspective: 1000px; /* Adiciona perspectiva para a rota√ß√£o */
}
.carta.virada {
    background-color: #f39c12;
    transform: rotateY(180deg);
}
.carta.desativada {
    background-color: #2ecc71;
    cursor: default;
    transform: scale(1.1); /* Aumenta um pouco o tamanho das cartas desativadas */
}
Explica√ß√£o:

perspective: 1000px;: Adiciona profundidade √† rota√ß√£o das cartas, tornando a anima√ß√£o mais realista.
transform: scale(1.1);: Aumenta o tamanho das cartas desativadas para destacar os pares encontrados.
4. Adicionar Som ao Jogo
Vamos adicionar efeitos sonoros para melhorar a experi√™ncia do usu√°rio.

HTML:

html
Copiar c√≥digo
<audio id="somAcertou" src="som_acertou.mp3"></audio>
<audio id="somErrou" src="som_errou.mp3"></audio>
JavaScript:

javascript
Copiar c√≥digo
const somAcertou = document.getElementById("somAcertou");
const somErrou = document.getElementById("somErrou");

function desabilitarCartas() {
    // ... c√≥digo existente ...
    somAcertou.play();
}

function desvirarCartas() {
    // ... c√≥digo existente ...
    somErrou.play();
}
Explica√ß√£o:

<audio>: Elementos que carregam os arquivos de som.
somAcertou.play();: Reproduz o som quando um par √© encontrado.
somErrou.play();: Reproduz o som quando as cartas n√£o formam um par.
Nota: Certifique-se de ter os arquivos de som som_acertou.mp3 e som_errou.mp3 na mesma pasta do seu projeto ou ajuste os caminhos conforme necess√°rio.

Conclus√£o
Parab√©ns! Voc√™ acabou de criar um Jogo da Mem√≥ria funcional e interativo. Neste projeto, aprendemos:

Estrutura Avan√ßada de HTML: Criar elementos din√¢micos e interativos.
Estiliza√ß√£o com CSS: Tornar o jogo visualmente atraente com grid layout, transi√ß√µes e anima√ß√µes.
Interatividade com JavaScript: Implementar l√≥gica condicional, manipula√ß√£o de arrays, eventos e temporizadores.
Manipula√ß√£o do DOM: Criar e interagir com elementos dinamicamente, tornando o jogo interativo.
Resolu√ß√£o de Problemas: Dividir problemas complexos em etapas menores e resolv√™-los de forma incremental.
Pr√≥ximos Passos
Agora que voc√™ dominou o Jogo da Mem√≥ria, que tal avan√ßar para projetos ainda mais desafiadores? Aqui est√£o algumas sugest√µes:

Pong Simples: Crie um jogo cl√°ssico de Pong utilizando canvas e JavaScript.
Jogo da Forca: Desenvolva uma vers√£o digital do tradicional jogo de forca.
Jogo do Dado: Simule o lan√ßamento de um dado e exiba o resultado na tela.
Quiz Interativo: Crie um quiz com perguntas e respostas interativas.
Jogo de Plataforma B√°sico: Desenvolva um jogo de plataforma simples usando HTML5 Canvas.
Cada um desses projetos ir√° ajud√°-lo a aprimorar suas habilidades e entender conceitos mais avan√ßados de programa√ß√£o web. Continue praticando, experimentando e se divertindo com a programa√ß√£o!

Recursos Adicionais
Documenta√ß√£o do MDN Web Docs:
HTML B√°sico
CSS B√°sico
JavaScript B√°sico
Tutoriais Online:
W3Schools
freeCodeCamp
Ferramentas de Desenvolvimento:
Editor de C√≥digo: Visual Studio Code
Ambiente de Teste: Qualquer navegador moderno (Google Chrome, Mozilla Firefox, etc.)
Dicas para Aprendizado
Pratique Regularmente: A pr√°tica constante √© essencial para aprimorar suas habilidades de programa√ß√£o.
Divida Problemas Complexos: Se um problema parecer dif√≠cil, divida-o em partes menores e resolva uma de cada vez.
Busque Ajuda: Utilize f√≥runs como Stack Overflow para esclarecer d√∫vidas.
Projete seus Pr√≥prios Jogos: Tente criar varia√ß√µes dos jogos apresentados para solidificar seu entendimento.
Explore Novos Conceitos: Aprenda sobre novos m√©todos e APIs do JavaScript para enriquecer seus projetos.
Continue explorando, experimentando e se divertindo com a programa√ß√£o! üöÄ